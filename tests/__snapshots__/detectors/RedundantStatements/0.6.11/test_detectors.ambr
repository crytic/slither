# serializer version: 1
# name: test_detector[RedundantStatements-0.6.11-redundant_statements.sol]
  list([
    list([
      dict({
        'check': 'redundant-statements',
        'confidence': 'High',
        'description': '''
          Redundant expression "RedundantStatementsContract (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#8)" inRedundantStatementsContract (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#3-18)
  
        ''',
        'elements': list([
          dict({
            'name': 'RedundantStatementsContract',
            'source_mapping': dict({
              'ending_column': 36,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 27,
              'lines': list([
                8,
              ]),
              'start': 169,
              'starting_column': 9,
            }),
            'type': 'node',
            'type_specific_fields': dict({
              'parent': dict({
                'name': 'constructor',
                'source_mapping': dict({
                  'ending_column': 6,
                  'filename_absolute': '/GENERIC_PATH',
                  'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'is_dependency': False,
                  'length': 93,
                  'lines': list([
                    5,
                    6,
                    7,
                    8,
                    9,
                  ]),
                  'start': 110,
                  'starting_column': 5,
                }),
                'type': 'function',
                'type_specific_fields': dict({
                  'parent': dict({
                    'name': 'RedundantStatementsContract',
                    'source_mapping': dict({
                      'ending_column': 0,
                      'filename_absolute': '/GENERIC_PATH',
                      'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'is_dependency': False,
                      'length': 254,
                      'lines': list([
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                      ]),
                      'start': 66,
                      'starting_column': 1,
                    }),
                    'type': 'contract',
                  }),
                  'signature': 'constructor()',
                }),
              }),
            }),
          }),
          dict({
            'name': 'RedundantStatementsContract',
            'source_mapping': dict({
              'ending_column': 0,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 254,
              'lines': list([
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
              ]),
              'start': 66,
              'starting_column': 1,
            }),
            'type': 'contract',
          }),
        ]),
        'first_markdown_element': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L8',
        'id': '1ffcec7a83522ce311c8410e5523283b97944a0c27356e3141b26a7f32a022d3',
        'impact': 'Informational',
        'markdown': '''
          Redundant expression "[RedundantStatementsContract](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L8)" in[RedundantStatementsContract](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L3-L18)
  
        ''',
      }),
      dict({
        'check': 'redundant-statements',
        'confidence': 'High',
        'description': '''
          Redundant expression "test (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#14)" inRedundantStatementsContract (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#3-18)
  
        ''',
        'elements': list([
          dict({
            'name': 'test',
            'source_mapping': dict({
              'ending_column': 13,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 4,
              'lines': list([
                14,
              ]),
              'start': 287,
              'starting_column': 9,
            }),
            'type': 'node',
            'type_specific_fields': dict({
              'parent': dict({
                'name': 'test',
                'source_mapping': dict({
                  'ending_column': 6,
                  'filename_absolute': '/GENERIC_PATH',
                  'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'is_dependency': False,
                  'length': 109,
                  'lines': list([
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                  ]),
                  'start': 209,
                  'starting_column': 5,
                }),
                'type': 'function',
                'type_specific_fields': dict({
                  'parent': dict({
                    'name': 'RedundantStatementsContract',
                    'source_mapping': dict({
                      'ending_column': 0,
                      'filename_absolute': '/GENERIC_PATH',
                      'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'is_dependency': False,
                      'length': 254,
                      'lines': list([
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                      ]),
                      'start': 66,
                      'starting_column': 1,
                    }),
                    'type': 'contract',
                  }),
                  'signature': 'test()',
                }),
              }),
            }),
          }),
          dict({
            'name': 'RedundantStatementsContract',
            'source_mapping': dict({
              'ending_column': 0,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 254,
              'lines': list([
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
              ]),
              'start': 66,
              'starting_column': 1,
            }),
            'type': 'contract',
          }),
        ]),
        'first_markdown_element': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L14',
        'id': '5223d6cc441a1f923616873898ea34e0ff11a758c38d6b5244b9e9ea6be9bec8',
        'impact': 'Informational',
        'markdown': '''
          Redundant expression "[test](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L14)" in[RedundantStatementsContract](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L3-L18)
  
        ''',
      }),
      dict({
        'check': 'redundant-statements',
        'confidence': 'High',
        'description': '''
          Redundant expression "uint256 (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#12)" inRedundantStatementsContract (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#3-18)
  
        ''',
        'elements': list([
          dict({
            'name': 'uint256',
            'source_mapping': dict({
              'ending_column': 13,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 4,
              'lines': list([
                12,
              ]),
              'start': 257,
              'starting_column': 9,
            }),
            'type': 'node',
            'type_specific_fields': dict({
              'parent': dict({
                'name': 'test',
                'source_mapping': dict({
                  'ending_column': 6,
                  'filename_absolute': '/GENERIC_PATH',
                  'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'is_dependency': False,
                  'length': 109,
                  'lines': list([
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                  ]),
                  'start': 209,
                  'starting_column': 5,
                }),
                'type': 'function',
                'type_specific_fields': dict({
                  'parent': dict({
                    'name': 'RedundantStatementsContract',
                    'source_mapping': dict({
                      'ending_column': 0,
                      'filename_absolute': '/GENERIC_PATH',
                      'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'is_dependency': False,
                      'length': 254,
                      'lines': list([
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                      ]),
                      'start': 66,
                      'starting_column': 1,
                    }),
                    'type': 'contract',
                  }),
                  'signature': 'test()',
                }),
              }),
            }),
          }),
          dict({
            'name': 'RedundantStatementsContract',
            'source_mapping': dict({
              'ending_column': 0,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 254,
              'lines': list([
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
              ]),
              'start': 66,
              'starting_column': 1,
            }),
            'type': 'contract',
          }),
        ]),
        'first_markdown_element': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L12',
        'id': '53f741bfdd4465fbdb8799391ca2fa50ac657b72ac9b822c87e2e4ae79d831d8',
        'impact': 'Informational',
        'markdown': '''
          Redundant expression "[uint256](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L12)" in[RedundantStatementsContract](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L3-L18)
  
        ''',
      }),
      dict({
        'check': 'redundant-statements',
        'confidence': 'High',
        'description': '''
          Redundant expression "uint256 (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#6)" inRedundantStatementsContract (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#3-18)
  
        ''',
        'elements': list([
          dict({
            'name': 'uint256',
            'source_mapping': dict({
              'ending_column': 13,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 4,
              'lines': list([
                6,
              ]),
              'start': 141,
              'starting_column': 9,
            }),
            'type': 'node',
            'type_specific_fields': dict({
              'parent': dict({
                'name': 'constructor',
                'source_mapping': dict({
                  'ending_column': 6,
                  'filename_absolute': '/GENERIC_PATH',
                  'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'is_dependency': False,
                  'length': 93,
                  'lines': list([
                    5,
                    6,
                    7,
                    8,
                    9,
                  ]),
                  'start': 110,
                  'starting_column': 5,
                }),
                'type': 'function',
                'type_specific_fields': dict({
                  'parent': dict({
                    'name': 'RedundantStatementsContract',
                    'source_mapping': dict({
                      'ending_column': 0,
                      'filename_absolute': '/GENERIC_PATH',
                      'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'is_dependency': False,
                      'length': 254,
                      'lines': list([
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                      ]),
                      'start': 66,
                      'starting_column': 1,
                    }),
                    'type': 'contract',
                  }),
                  'signature': 'constructor()',
                }),
              }),
            }),
          }),
          dict({
            'name': 'RedundantStatementsContract',
            'source_mapping': dict({
              'ending_column': 0,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 254,
              'lines': list([
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
              ]),
              'start': 66,
              'starting_column': 1,
            }),
            'type': 'contract',
          }),
        ]),
        'first_markdown_element': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L6',
        'id': 'c58083eaf5653fc9616833c617157456ad9088c4638009d9cdfebdc1445671bd',
        'impact': 'Informational',
        'markdown': '''
          Redundant expression "[uint256](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L6)" in[RedundantStatementsContract](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L3-L18)
  
        ''',
      }),
      dict({
        'check': 'redundant-statements',
        'confidence': 'High',
        'description': '''
          Redundant expression "bool (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#7)" inRedundantStatementsContract (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#3-18)
  
        ''',
        'elements': list([
          dict({
            'name': 'bool',
            'source_mapping': dict({
              'ending_column': 13,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 4,
              'lines': list([
                7,
              ]),
              'start': 155,
              'starting_column': 9,
            }),
            'type': 'node',
            'type_specific_fields': dict({
              'parent': dict({
                'name': 'constructor',
                'source_mapping': dict({
                  'ending_column': 6,
                  'filename_absolute': '/GENERIC_PATH',
                  'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'is_dependency': False,
                  'length': 93,
                  'lines': list([
                    5,
                    6,
                    7,
                    8,
                    9,
                  ]),
                  'start': 110,
                  'starting_column': 5,
                }),
                'type': 'function',
                'type_specific_fields': dict({
                  'parent': dict({
                    'name': 'RedundantStatementsContract',
                    'source_mapping': dict({
                      'ending_column': 0,
                      'filename_absolute': '/GENERIC_PATH',
                      'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'is_dependency': False,
                      'length': 254,
                      'lines': list([
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                      ]),
                      'start': 66,
                      'starting_column': 1,
                    }),
                    'type': 'contract',
                  }),
                  'signature': 'constructor()',
                }),
              }),
            }),
          }),
          dict({
            'name': 'RedundantStatementsContract',
            'source_mapping': dict({
              'ending_column': 0,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 254,
              'lines': list([
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
              ]),
              'start': 66,
              'starting_column': 1,
            }),
            'type': 'contract',
          }),
        ]),
        'first_markdown_element': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L7',
        'id': 'f0fef441fabe415b9cbc63bfc5a2a5c69f6248ce22d1bd94f73979f928cb7dba',
        'impact': 'Informational',
        'markdown': '''
          Redundant expression "[bool](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L7)" in[RedundantStatementsContract](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L3-L18)
  
        ''',
      }),
      dict({
        'check': 'redundant-statements',
        'confidence': 'High',
        'description': '''
          Redundant expression "assert(bool) (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#13)" inRedundantStatementsContract (tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#3-18)
  
        ''',
        'elements': list([
          dict({
            'name': 'assert(bool)',
            'source_mapping': dict({
              'ending_column': 15,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 6,
              'lines': list([
                13,
              ]),
              'start': 271,
              'starting_column': 9,
            }),
            'type': 'node',
            'type_specific_fields': dict({
              'parent': dict({
                'name': 'test',
                'source_mapping': dict({
                  'ending_column': 6,
                  'filename_absolute': '/GENERIC_PATH',
                  'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                  'is_dependency': False,
                  'length': 109,
                  'lines': list([
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                  ]),
                  'start': 209,
                  'starting_column': 5,
                }),
                'type': 'function',
                'type_specific_fields': dict({
                  'parent': dict({
                    'name': 'RedundantStatementsContract',
                    'source_mapping': dict({
                      'ending_column': 0,
                      'filename_absolute': '/GENERIC_PATH',
                      'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
                      'is_dependency': False,
                      'length': 254,
                      'lines': list([
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                      ]),
                      'start': 66,
                      'starting_column': 1,
                    }),
                    'type': 'contract',
                  }),
                  'signature': 'test()',
                }),
              }),
            }),
          }),
          dict({
            'name': 'RedundantStatementsContract',
            'source_mapping': dict({
              'ending_column': 0,
              'filename_absolute': '/GENERIC_PATH',
              'filename_relative': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'filename_short': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol',
              'is_dependency': False,
              'length': 254,
              'lines': list([
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
              ]),
              'start': 66,
              'starting_column': 1,
            }),
            'type': 'contract',
          }),
        ]),
        'first_markdown_element': 'tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L13',
        'id': 'f902982db50d530e22b29f35ab1a740f1af29683b0ebb9edd53240721b4f95b9',
        'impact': 'Informational',
        'markdown': '''
          Redundant expression "[assert(bool)](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L13)" in[RedundantStatementsContract](tests/detectors/redundant-statements/0.6.11/redundant_statements.sol#L3-L18)
  
        ''',
      }),
    ]),
  ])
# ---
